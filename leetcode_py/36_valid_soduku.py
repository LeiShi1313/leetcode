class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        row_map = [[False] * 9 for _ in range(9)]
        col_map = [[False] * 9 for _ in range(9)]

        for i in range(9):
            for j in range(9):
                if board[i][j] != '.':
                    num = int(board[i][j])
                    if row_map[i][num - 1] or col_map[j][num - 1]:
                        return False
                    row_map[i][num - 1] = True
                    col_map[j][num - 1] = True
        return True

if __name__ == '__main__':
    soduku = [
        [".",".","4",".",".",".","6","3","."],
        [".",".",".",".",".",".",".",".","."],
        ["5",".",".",".",".",".",".","9","."],
        [".",".",".","5","6",".",".",".","."],
        ["4",".","3",".",".",".",".",".","1"],
        [".",".",".","7",".",".",".",".","."],
        [".",".",".","5",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".",".",".","."]]
    print Solution().isValidSudoku()

    soduku = [
        [".",".",".",".",".",".",".",".","."],
        ["4",".",".",".",".",".",".",".","."],
        [".",".",".",".",".",".","6",".","."],
        [".",".",".","3","8",".",".",".","."],
        [".","5",".",".",".","6",".",".","1"],
        ["8",".",".",".",".",".",".","6","."],
        [".",".",".",".",".",".",".",".","."],
        [".",".","7",".","9",".",".",".","."],
        [".",".",".","6",".",".",".",".","."]]
    print Solution().isValidSudoku(soduku)
